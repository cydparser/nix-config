#!/usr/bin/env bash

export NIXPKGS_CONFIG="$XDG_CONFIG_HOME/nixpkgs/config.nix"

export NIXPKGS_LIST="$XDG_CACHE_HOME/nix/pkgs-list"

export NIXPKGS_SRC=~/src/nixpkgs

if [[ -n "$DARWIN" ]] && [[ -e "$NIXPKGS_SRC" ]]; then
  export NIX_PATH=$NIXPKGS_SRC:nixpkgs=$NIXPKGS_SRC
fi

# https://nixos.org/channels/nixos-unstable
_=${NIX_CHANNEL_UNSTABLE:=nu}

NIX_GHC_VERSION=7103
NIX_HASKELL_PACKAGES="$NIX_CHANNEL_UNSTABLE.pkgs.haskell.packages.ghc$NIX_GHC_VERSION"

if [[ -z "$SHELL" ]]; then
  # Needed by exec-path-from-shell-initialize (emacs).
  export SHELL="$(which zsh)"
fi

alias nix-squash='nix-env --delete-generations old && nix-collect-garbage'
alias nix-squash-system='nix-collect-garbage -d'
alias nix-optimize='nix-store --optimise'
alias nix-env-src="nix-env -f '$NIXPKGS_SRC/pkgs/top-level/all-packages.nix'"

nix-q() {
  [[ -f "$NIXPKGS_LIST" ]] || nix-update
  grep "$1" "$NIXPKGS_LIST"
}

nix-update() {
  mkdir -p $(dirname $NIXPKGS_LIST)
  nix-channel --update && nix-env -qaP '*' > "$NIXPKGS_LIST" && \
    nix-env -qaP -A "$NIX_HASKELL_PACKAGES" >> "$NIXPKGS_LIST"
}

nix-ghc-versions() {
  nix-env -qaP -A "$NIX_CHANNEL_UNSTABLE.pkgs.haskell.compiler" | cat
}

nix-shell-ghc() {
  local ver="${1:? Missing version}"
  if [[ -n "$2" ]]; then
    local cmd='--command "cabal configure"'
  fi
  nix-shell -p "$NIX_CHANNEL_UNSTABLE.pkgs.haskell.compiler.ghc$(echo "$ver" | tr -d '.') $cmd"
}

nix-shell-phases() {
  local line=$(typeset -f genericBuild | grep 'phases=')
  eval "${line//phases=/local p=}"
  echo "$p"
}

nix-shell-tmp() {
  local attr="$1"
  local keep="$2"
  local tmp="/tmp/nix-shell-$(whoami)-$attr-$(date +%s)"
  mkdir -p "$tmp"
  cd $tmp
  nix-shell $NIXPKGS_SRC -A "$attr" --command "export out='$tmp'; return"
  [[ -z "$keep" ]] && rm -r "$tmp"
  cd -
}
