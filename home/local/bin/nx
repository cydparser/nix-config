#!/usr/bin/env bash

main() {
  local cmd="${1:? Missing command}"
  shift
  case "$cmd" in
    b)
      cmd='build' ;;
    c)
      cmd='channel' ;;
    d)
      cmd='diff' ;;
    e)
      cmd='env' ;;
    ev)
      cmd='eval' ;;
    f)
      cmd='fetch' ;;
    q)
      cmd='query' ;;
    r)
      cmd='repl' ;;
    rb)
      cmd='rebuild' ;;
    st)
      cmd='store' ;;
    s|sh)
      cmd='shell' ;;
    sy)
      cmd='system' ;;
  esac

  case "$cmd" in
    build|channel|collect-garbage|copy-closure|daemon|diff|env|generate-config\
      |generate-patches|hash|index|info|install-package|instantiate|locate\
      |log2xml|prefetch-git|prefetch-svn|prefetch-url|pull|push|shell|store)
      "nix-${cmd}" "$@" ;;
    build-vms|container|help|install|option|prepare-root|rebuild|version)
      "nixos-${cmd}" "$@" ;;
    fetch|pin|query|sql|with)
      nx-$cmd "$@" ;;
    gc)
      nix-store --gc "$@" ;;
    installed)
      nix-env -q --out-path ;;
    outdated)
      nix-env -u --dry-run -f '<nixpkgs>' 2>&1 | rg '^upgrading' \
        | sed -e 's/^upgrading/  */g' -e "s/'//g" -e 's/ to / -> /g'
      ;;
    optimize)
      nix-store --optimise "$@" ;;
    pp)
      if [[ -n "$1" ]] && [[ -e "$1" ]]; then
        exec <"$1"
        shift
      fi
      nx-with haskellPackages.nix-derivation:pretty-derivation "$@" ;;
    run)
      nix-shell --run "$(printf " %q" "$@")" ;;
    squash)
      nix-collect-garbage --delete-old "$@" ;;
    system)
      main "$@" --profile /nix/var/nix/profiles/system ;;
    upgrade)
      nixos-rebuild switch --upgrade "$@" ;;
    *)
      nix "$cmd" "$@" ;;
  esac
}

nx-fetch() {
  local prot="${1:? Missing protocol}"
  "nix-prefetch-$prot" "${@:2}"
}

nx-pin() {
  local channel="${1:-nixpkgs}"
  local src rev hash

  if [[ ! -d "$channel" ]]; then
    channel=$(nix eval "(<$channel>)") || return 1
  fi
  rev="$(cat "$channel/.git-revision")" \
    && src="$(find /nix/store -maxdepth 1 -name "*-nixpkgs-${rev}-src")" \
    && test -n "$src" \
    && hash="$(nix-hash --type sha256 --base32 "$src")" \
      || return 1
  cat <<EOF
  import (fetchFromGitHub {
    owner = "NixOS";
    repo  = "nixpkgs";
    rev = "$rev";
    sha256 = "$hash";
  }) {};
EOF
}

nx-query() {
  local cmd="${1:? Missing query cmd}"
  shift
  case "$cmd" in
    drv)
      nix-store --query --deriver "$@" ;;
    gcroots)
      find /nix/var/nix/gcroots -mindepth 1 -type l -print0 | xargs -0 readlink --canonicalize ;;
    ghc)
      nix-env -qaP -A "${1:-nixos}.pkgs.haskell.compiler" | cat ;;
    *)
      echo "Unknown query command: $cmd" >&2
      return 1
      ;;
  esac
}

nx-sql() {
  nix-shell -p sqliteInteractive --run \
            "sudo sqlite3 /nix/var/nix/db/db.sqlite '$*'"
}

# Usage: nix-with PACKAGE[:COMMAND] [ARGS]*
#
# Examples:
#    nx-with haskellPackages.hlint --help
#    nx-with docker_compose:docker-compose ps
nx-with() {
  local pkgcmd="${1:? Missing package:command}"
  local pkg cmd args
  pkg="$(cut -d : -f 1    <<< "$pkgcmd")"
  cmd="$(cut -d : -f 2 -s <<< "$pkgcmd")"
  [[ -n "$cmd" ]] \
    || cmd="${pkg##*.}"
  [[ "$#" -lt 2 ]] \
    || args="$(printf " %q" "${@:2}")"

  nix-shell -p "$pkg" --run "$cmd $args"
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  set -eo pipefail
  main "$@"
fi
